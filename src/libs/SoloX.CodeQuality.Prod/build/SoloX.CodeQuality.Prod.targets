<Project>

  <UsingTask
      TaskName="ReplaceTextFile"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var inputTxt = File.ReadAllText(InputFilename);
            var outputTxt = File.Exists(OutputFilename) ? File.ReadAllText(OutputFilename) : string.Empty;

            if (!inputTxt.Equals(outputTxt, StringComparison.Ordinal))
            {
                File.WriteAllText(OutputFilename, inputTxt);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
      TaskName="CopyTextFile"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <Overwrite ParameterType="System.Boolean" Required="false" />
      <Replace ParameterType="System.String" Required="false" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var txt = File.ReadAllText(InputFilename);

            if (!string.IsNullOrEmpty(Replace))
            {
                foreach (var replaceItem in Replace.Split(';'))
                {
                    var idx = replaceItem.IndexOf('=');
                    var key = $"{{{replaceItem.Substring(0, idx).Trim()}}}";
                    var value = replaceItem.Substring(idx + 1).Trim();
                    txt = txt.Replace(key, value);
                }
            }

            var outputDirectory = Path.GetDirectoryName(OutputFilename);
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }

            if (Overwrite)
            {
                File.WriteAllText(OutputFilename, txt);
            }
            else
            {
                File.AppendAllText(OutputFilename, txt);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Condition="$(CodeQualityOverrideEditorConfig) == true"
          Name="CodeQualityMain"
          BeforeTargets="BeforeBuild;BeforeRebuild;AfterResolveReferences">

    <ItemGroup>
      <OutputEditorConfigFile Include="$(MSBuildProjectDirectory)/.editorconfig" />
      <IntermediateOutputEditorConfigFile Include="$(IntermediateOutputPath)/.editorconfig" />
      <CsCaEditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.cs.compiler.ca.editorconfig" />
      <CsCsEditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.cs.compiler.cs.editorconfig" />
      <Ide1EditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.cs.ide1.editorconfig" />
      <Ide2EditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.cs.ide2.editorconfig" />
      <HeaderNoneEditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.cs.header.none.editorconfig" />
      <HeaderCopyrightEditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.cs.header.copyright.editorconfig" />
      <GenEditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.generated.editorconfig" />
      <RazorEditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.razor.editorconfig" />
      <WebEditorConfigFile Include="$(MSBuildThisFileDirectory)../resources/style.web.editorconfig" />
    </ItemGroup>

    <CopyTextFile
      InputFilename="@(WebEditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" Overwrite="true" />
    <CopyTextFile
      InputFilename="@(RazorEditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      InputFilename="@(GenEditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityFieldsUseUnderscorStyle) == false"
      InputFilename="@(Ide1EditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityFieldsUseUnderscorStyle) == true"
      InputFilename="@(Ide2EditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityHeaderEnable) == false"
      InputFilename="@(HeaderNoneEditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityHeaderEnable) == true"
      InputFilename="@(HeaderCopyrightEditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)"
      Replace="companyName=$(CodeQualityHeaderCompanyName);copyright=$(CodeQualityHeaderCopyright);license=$(CodeQualityHeaderLicense);licenseFile=$(CodeQualityHeaderLicenseFile)"/>
    <CopyTextFile
      InputFilename="@(CsCsEditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      InputFilename="@(CsCaEditorConfigFile)" OutputFilename="@(IntermediateOutputEditorConfigFile)" />
    <ReplaceTextFile
      InputFilename="@(IntermediateOutputEditorConfigFile)" OutputFilename="@(OutputEditorConfigFile)" />

  </Target>

</Project>