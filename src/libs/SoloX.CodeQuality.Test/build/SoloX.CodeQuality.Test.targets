<Project>

  <UsingTask
    TaskName="AddTextLines"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Lines ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Linq"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var lines = Lines.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
            var outputLines = File.Exists(OutputFilename) ? File.ReadAllLines(OutputFilename) : Array.Empty<string>();

            var linesToAdd = lines.Where(line => !outputLines.Contains(line)).ToArray();
            if (linesToAdd.Any())
            {
                File.AppendAllLines(OutputFilename, linesToAdd);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
      TaskName="ReplaceTextFile"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var inputTxt = File.ReadAllText(InputFilename);
            var outputTxt = File.Exists(OutputFilename) ? File.ReadAllText(OutputFilename) : string.Empty;

            if (!inputTxt.Equals(outputTxt, StringComparison.Ordinal))
            {
                File.WriteAllText(OutputFilename, inputTxt);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
      TaskName="CopyTextFile"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <Overwrite ParameterType="System.Boolean" Required="false" />
      <Replace ParameterType="System.String" Required="false" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var txt = File.ReadAllText(InputFilename);

            if (!string.IsNullOrEmpty(Replace))
            {
                foreach (var replaceItem in Replace.Split(';'))
                {
                    var idx = replaceItem.IndexOf('=');
                    var key = $"{{{replaceItem.Substring(0, idx).Trim()}}}";
                    var value = replaceItem.Substring(idx + 1).Trim();
                    txt = txt.Replace(key, value);
                }
            }

            var outputDirectory = Path.GetDirectoryName(OutputFilename);
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }

            if (Overwrite)
            {
                File.WriteAllText(OutputFilename, txt);
            }
            else
            {
                File.AppendAllText(OutputFilename, txt);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Condition="$(CodeQualityOverrideEditorConfig) == true"
          Name="CodeQualityMain"
          BeforeTargets="BeforeBuild;BeforeRebuild;AfterResolveReferences">

    <PropertyGroup>
      <OutputEditorConfigFile>$(MSBuildProjectDirectory)/.editorconfig</OutputEditorConfigFile>
      <IntermediateOutputEditorConfigFile>$(IntermediateOutputPath)/.editorconfig</IntermediateOutputEditorConfigFile>
      <CsCaEditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.cs.compiler.ca.editorconfig</CsCaEditorConfigFile>
      <CsCsEditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.cs.compiler.cs.editorconfig</CsCsEditorConfigFile>
      <Ide1EditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.cs.ide1.editorconfig</Ide1EditorConfigFile>
      <Ide2EditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.cs.ide2.editorconfig</Ide2EditorConfigFile>
      <HeaderNoneEditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.cs.header.none.editorconfig</HeaderNoneEditorConfigFile>
      <HeaderCopyrightEditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.cs.header.copyright.editorconfig</HeaderCopyrightEditorConfigFile>
      <GenEditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.generated.editorconfig</GenEditorConfigFile>
      <RazorEditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.razor.editorconfig</RazorEditorConfigFile>
      <WebEditorConfigFile>$(MSBuildThisFileDirectory)../resources/style.web.editorconfig</WebEditorConfigFile>

    </PropertyGroup>

    <CopyTextFile
      InputFilename="$(WebEditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" Overwrite="true" />
    <CopyTextFile
      InputFilename="$(RazorEditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityFieldsUseUnderscorStyle) == false"
      InputFilename="$(Ide1EditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityFieldsUseUnderscorStyle) == true"
      InputFilename="$(Ide2EditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityHeaderEnable) == false"
      InputFilename="$(HeaderNoneEditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      Condition="$(CodeQualityHeaderEnable) == true"
      InputFilename="$(HeaderCopyrightEditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)"
      Replace="companyName=$(CodeQualityHeaderCompanyName);copyright=$(CodeQualityHeaderCopyright);license=$(CodeQualityHeaderLicense);licenseFile=$(CodeQualityHeaderLicenseFile)"/>
    <CopyTextFile
      InputFilename="$(CsCsEditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      InputFilename="$(CsCaEditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" />
    <CopyTextFile
      InputFilename="$(GenEditorConfigFile)" OutputFilename="$(IntermediateOutputEditorConfigFile)" />
    <ReplaceTextFile
      InputFilename="$(IntermediateOutputEditorConfigFile)" OutputFilename="$(OutputEditorConfigFile)" />

  </Target>

  <Target Condition="$(CodeQualityUpdateGitIgnore) == true"
          Name="GitIgnoreUpdate"
          BeforeTargets="BeforeBuild;BeforeRebuild;AfterResolveReferences">

    <PropertyGroup>
      <GitIgnoreFile>$(MSBuildProjectDirectory)/.gitignore</GitIgnoreFile>

      <GitIgnoreList>$(DocumentationFile)</GitIgnoreList>
      <GitIgnoreList Condition="$(CodeQualityOverrideEditorConfig) == true">$(GitIgnoreList);.editorconfig</GitIgnoreList>
    </PropertyGroup>

    <AddTextLines
      OutputFilename="$(GitIgnoreFile)" Lines="$(GitIgnoreList)"/>

  </Target>

</Project>