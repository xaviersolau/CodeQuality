// ----------------------------------------------------------------------
// <copyright file="SolutionBuilderTest.cs" company="Xavier Solau">
// Copyright © 2021 Xavier Solau.
// Licensed under the MIT license.
// See LICENSE file in the project root for full license information.
// </copyright>
// ----------------------------------------------------------------------

using FluentAssertions;
using SoloX.CodeQuality.Test.Helpers.Solution;
using Xunit;

namespace SoloX.CodeQuality.Test.Helpers.UTest.Solution
{
    public class SolutionBuilderTest
    {
        [Theory]
        [InlineData("SoloX.CodeQuality.TestNuget")]
        [InlineData("SoloX.CodeQuality.PreReleaseTestNuget")]
        public void IsShouldBuildASolutionWithATestProject(string packageName)
        {
            var configurationName = ProbConfiguration();

            var root = new RandomGenerator().RandomString(4);

            // Let's create a solution in the random root folder.
            var solution = new SolutionBuilder(root, "TestSolution")
                // Set up the nuget.config to use a dedicated nuget cache and to specify where to get the nuget
                // packages we want to test (generated in the same solution).
                .WithNugetConfig(@"PkgCache", configuration =>
                {
                    // We want to use the package generated by the projects SoloX.CodeQuality.WebHost and SoloX.CodeQuality.Playwright.
                    configuration
                        .UsePackageSources(src =>
                        {
                            src.Clear()
                                .Add($"../../../../../{packageName}/bin/{configurationName}")
                                .AddNugetOrg();
                        });
                })
                // Set up a xunit project to use the nugets.
                .WithProject("TestProject", "xunit", configuration =>
                {
                    configuration.UsePackageReference(packageName);
                })
                // Finally create the solution.
                .Build();

            try
            {
                var actBuild = () => solution.Build();

                actBuild.Should().NotThrow();

                var actTest = () => solution.Test();

                actTest.Should().NotThrow();
            }
            finally
            {
                Directory.Delete(root, true);
            }
        }

        [Theory]
        [InlineData("SoloX.CodeQuality.TestTool", "testtool")]
        [InlineData("SoloX.CodeQuality.PreReleaseTestTool", "prerealsetesttool")]
        public void IsShouldBuildASolutionUsingADotnetTool(string toolProject, string toolName)
        {
            var configurationName = ProbConfiguration();

            var root = new RandomGenerator().RandomString(4);

            // Let's create a solution in the random root folder.
            var solution = new SolutionBuilder(root, "TestSolution")
                // Set up the nuget.config to use a dedicated nuget cache and to specify where to get the nuget
                // packages we want to test (generated in the same solution).
                .WithNugetConfig(@"PkgCache", configuration =>
                {
                    // We want to use the package generated by the projects SoloX.CodeQuality.WebHost and SoloX.CodeQuality.Playwright.
                    configuration
                        .UsePackageSources(src =>
                        {
                            src.Clear()
                                .Add(@$"../../../../../{toolProject}/bin/{configurationName}")
                                .AddNugetOrg();
                        });
                })
                .WithDotnetTools(configuration =>
                {
                    configuration
                        .UseTool(toolProject);
                })
                // Finally create the solution.
                .Build();

            try
            {
                var actBuild = () => solution.Build();

                actBuild.Should().NotThrow();

                var actTest = () => solution.RunTool(toolName, $"a1 a2 --debug:false");

                var logs = actTest.Should().NotThrow().Subject.LogMessages;

                logs.Should().NotBeEmpty();

                logs![0].Message.Should().Be("Hello, World!");
                logs![1].Message.Should().Be("given arg 0: a1");
                logs![2].Message.Should().Be("given arg 1: a2");
            }
            finally
            {
                Directory.Delete(root, true);
            }
        }

        private static string ProbConfiguration()
        {
            var location = Path.GetDirectoryName(typeof(SolutionBuilderTest).Assembly.Location);

            return Path.GetFileName(Path.GetDirectoryName(location)!);
        }
    }
}
